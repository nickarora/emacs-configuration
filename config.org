
#+title: Emacs Config

* Package Management

** Use Package

Install packages by default when configured with use-package.

#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src

Macro to use to configure built-in featues, rather than packages that
do not need to be installed

#+begin_src emacs-lisp
(defmacro use-feature (name &rest args)
  "`use-package' with package installation (`ensure') disabled."
  (declare (indent defun))
  `(use-package ,name
     :ensure nil
     ,@args))
#+end_src

* Base Settings

** Customization Saving

Do not save customizations in =init.el=, instead save them in a
temporary file that will be discarded. As a result, any customizations
made in a session will not be persisted across sessions.

#+begin_src emacs-lisp
(setq custom-file (expand-file-name
                   (format "custom-%d-%d.el" (emacs-pid) (random))
                   temporary-file-directory))
#+end_src

** No Littering

Move all common files typically written to the =user-emacs-directory=
to the =var= and =etc= subdirectories so that they can be included in
=.gitignore=

#+begin_src emacs-lisp
(use-package no-littering
  :ensure (:wait t))
#+end_src

** Minibuffer

Support opening new minibuffers from inside existing minibuffers.

#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)
#+end_src

Do not allow the cursor in the minibuffer prompt.

#+begin_src emacs-lisp
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))

(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

** Save History

Command and other menu history is saved.

#+begin_src emacs-lisp
(use-feature savehist
  :init
  (savehist-mode))
#+end_src

* Assistance

** Which Key

Which-key is a minor mode for Emacs that displays the key bindings
following your currently entered incomplete command (a prefix) in a
popup.

#+begin_src emacs-lisp
(use-feature which-key
  :init
  (which-key-mode))
#+end_src

* Startup Time

#+begin_src emacs-lisp
(add-hook 'after-init-hook
          (lambda ()
            (let ((inhibit-message t))
              (message "Emacs init time: %s" (emacs-init-time)))))
#+end_src

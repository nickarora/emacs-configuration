#+title: Emacs Config

* Package Management

** Use Package

Install packages by default when configured with use-package.

#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src

Macro to use to configure built-in featues, rather than packages that do not
need to be installed

#+begin_src emacs-lisp
(defmacro use-feature (name &rest args)
  "`use-package' with package installation (`ensure') disabled."
  (declare (indent defun))
  `(use-package ,name
     :ensure nil
     ,@args))
#+end_src

* Base Settings

** Customization Saving

Do not save customizations in =init.el=, instead save them in a temporary file
that will be discarded. As a result, any customizations made in a session will
not be persisted across sessions.

#+begin_src emacs-lisp
(setq custom-file (expand-file-name
                   (format "custom-%d-%d.el" (emacs-pid) (random))
                   temporary-file-directory))
#+end_src

** No Littering

Move all common files typically written to the =user-emacs-directory= to the
=var= and =etc= subdirectories so that they can be included in =.gitignore=

#+begin_src emacs-lisp
(use-package no-littering
  :ensure (:wait t))
#+end_src

** Minibuffer

Support opening new minibuffers from inside existing minibuffers.

#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)
#+end_src

Do not allow the cursor in the minibuffer prompt.

#+begin_src emacs-lisp
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))

(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

** Save History

Command and other menu history is saved.

#+begin_src emacs-lisp
(use-feature savehist
  :init
  (savehist-mode))
#+end_src

** Autofill

Set default width of fill mode to 80 columns.

#+begin_src emacs-lisp
(setq-default fill-column 80)
#+end_src

** Identation

Two space indentation by default.

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil
              tab-width 2
              smie-indent-basic 2)
#+end_src

* Assistance

** Which Key

Which-key is a minor mode for Emacs that displays the key bindings following
your currently entered incomplete command (a prefix) in a popup.

#+begin_src emacs-lisp
(use-feature which-key
  :init
  (which-key-mode))
#+end_src

** Helpful

Helpful is an alternative to the built-in Emacs help that provides much more
contextual information.

#+begin_src emacs-lisp
(use-package helpful
  :bind (
         ;; Remap standard commands
         ([remap describe-function] . #'helpful-callable)
         ([remap describe-command] . #'helpful-command)
         ([remap describe-variable] . #'helpful-variable)
         ([remap describe-symbol] . #'helpful-symbol)
         ([remap describe-key] . #'helpful-key)))
#+end_src

* User Interface

** Completion Menu (Vertico)

Vertico provides a performant and minimalistic vertical completion UI based on
the default completion system.

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode))
#+end_src

** Consult

Consult provides search and navigation commands based on the Emacs completion
function completing-read.

#+begin_src emacs-lisp
(use-package consult
  :bind (("C-x b" . consult-buffer)))
#+end_src

** Orderless

The orderless completion style allows typing parts of what is being matched,
separated by spaces. For example, "som thi" will match "this-is-some-thing".

#+begin_src emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

* File Types

** Shell

#+begin_src emacs-lisp
(use-feature shell
  :config
  (setq sh-basic-offset 2))
#+end_src


** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :config
  (add-hook 'markdown-mode #'visual-line-mode)
  (add-hook 'markdown-mode #'visual-wrap-prefix-mode)

  (setq markdown-list-indent-width 2))
#+end_src

* Verion Control

** Magit

#+begin_src emacs-lisp
(use-package magit)
#+end_src

Install latest version of transient, as the version included in Emacs is not
recent enough.

#+begin_src emacs-lisp
(use-package transient)
#+end_src

* Startup Time

#+begin_src emacs-lisp
(add-hook 'after-init-hook
          (lambda ()
            (let ((inhibit-message t))
              (message "Emacs init time: %s" (emacs-init-time)))))
#+end_src
